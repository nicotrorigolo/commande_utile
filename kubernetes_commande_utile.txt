Activer l'autocompletion
source <(kubectl completion bash)

Creer un cluster
sudo kubeadm init --apiserver-advertise-address=11.0.0.11 --node-name $HOSTNAME
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Installer les pods de reseau du cluster avec Calico
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

Parametrer le taint
kubectl taint nodes --all node-role.kubernetes.io/control-plane-

Afficher tous les pod disponible
kubectl get pods --all-namespaces

Afficher les pods sur un namespace precis
kubectl get pods -n {nom_namespace}

Afficher adresse ip des pods
kubectl get pods -o wide

Acceder a un container d'un pod depuis l'exterieur du pod
kubectl port-forward {nom_container} {port_ecoute_local}:{port_ecoute_container}  --address 0.0.0.0

Afficher les images prÃ©sents dans les pods
kubectl get replicaset -o wide

Afficher l'historique des rolling_update (il faut que le deploiement possede la strategy de type "RollingUpdate")
kubectl rollout history {nom_deploiement}

A partir de l'historique, revenir a une version precedente bien precise (il faut que le deploiement possede la strategy de type "RollingUpdate")
kubectl -- rollout undo {nom_deploiement} --to-revision {numero_revision}

A partir de l'historique, revenir a la version precedente (il faut que le deploiement possede la strategy de type "RollingUpdate")
kubectl -- rollout undo {nom_deploiement}

Ouvrir un bash dans un pod
kubectl exec -it {nom_pod} -- bash
